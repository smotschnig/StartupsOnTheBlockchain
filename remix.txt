pragma solidity ^0.4.2;

contract ProjectFactory {
    address[] public deployedProjects;
    mapping(address => string) public projectStartup;
    mapping(address => string) public projectTitle;
    mapping(address => uint) public projectDate;
    
    address[] public deployedProfiles;

    function createProject(string startup, string title, string deadline, string description, uint wage) public {
        address newProject = new Project(startup, title, deadline, description, wage, now, msg.sender);
        projectStartup[newProject] = startup;
        projectTitle[newProject] = title;
        projectDate[newProject] = now;
        deployedProjects.push(newProject);
    }
    
    function getDeployedProjects() public view returns (address[]) {
        return (
            deployedProjects
        );
    }
    
    function createProfile(string fName, string lName, uint birthDate, string education, string experience, string skills) public {
        address newProfile = new Profile(fName, lName, birthDate, education, experience, skills, now, msg.sender);
        deployedProfiles.push(newProfile);
    }
    
    function getDeployedProfiles() public view returns (address[]) {
        return (
            deployedProfiles
        );
    }
}

// contract Owned {
//     address manager;
    
//     constructor() public {
//         manager = msg.sender;
//     }
    
//     modifier restricted() {
//         require(msg.sender == manager);
//         _;
//     }
// }

contract Project {
    address public manager;
    string public startup;
    string public title;
    string public deadline;
    string public description;
    uint public wage;
    uint public date;

    constructor(string _startup, string _title, string _deadline, string _description, uint _wage, uint _date, address _manager) public {
        manager = _manager;
        startup = _startup;
        title = _title;
        deadline = _deadline;
        description = _description;
        wage = _wage;
        date = _date;
    }

    function getSummary() public view returns (string, string, string, string, uint, uint, address) {
        return (
            startup,
            title,
            deadline,
            description,
            wage,
            date,
            manager
        );
    }

}

contract Profile {
    address public manager;
    string public fName;
    string public lName;
    uint public birthDate;
    string public education;
    string public experience;
    string public skills;
    uint public date;
    
    // struct Instructor {
    //     string fName;
    //     string lName;
    //     uint birthDate;
    //     string education;
    //     string experience;
    //     string skills;
    //     uint date;
    // }
    
    // mapping (address => Instructor) instructors;
    address[] public instructorAccounts;
    

    constructor(string _fName, string _lName, uint _birthDate, string _education, string _experience, string _skills, uint _date, address _manager) public {
        // manager = _manager;
        
        // Instructor memory newInstructor = Instructor({
        //     fName: _fName, 
        //     lName: _lName, 
        //     birthDate: _birthDate, 
        //     education: _education, 
        //     experience: _experience, 
        //     skills: _skills, 
        //     date: _date
        // });
        
        manager = _manager;
        fName = _fName;
        lName = _lName;
        birthDate = _birthDate;
        education = _education;
        experience = _experience;
        skills = _skills;
        date = _date;
        
        instructorAccounts.push(_manager) - 1;
    }
    
    function getInstructors() view public returns(address[]) {
        return instructorAccounts;
    }
    
    function getInstructor() public view returns(string, string, uint, string, string, string, uint, address) {
        return (
            fName,
            lName,
            birthDate,
            education,
            experience,
            skills,
            date,
            manager
        );
        
        // return (
        //     instructors[_address].fName, 
        //     instructors[_address].lName, 
        //     instructors[_address].birthDate, 
        //     instructors[_address].education,
        //     instructors[_address].experience,
        //     instructors[_address].skills,
        //     instructors[_address].date
        // );
        
    }


    // event instructorInfo(
    //     string fName,
    //     string lName,
    //     uint birthDate,
    //     string education,
    //     string experience,
    //     string skills
    // ); 
    
    modifier restricted() {
        require(msg.sender == manager);
        _;
    }

    
    function setInstructor(address _address, string _fName, string _lName, uint _birthDate, string _education, string _experience, string _skills) restricted public {
        fName = _fName;
        lName = _lName;
        birthDate = _birthDate;
        education = _education;
        experience = _experience;
        skills = _skills;
    }
}